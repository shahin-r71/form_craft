generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @db.Uuid
  email             String             @unique
  name              String?
  avatarUrl         String?            @map("avatar_url")
  isAdmin           Boolean            @default(false) @map("is_admin")
  isActive          Boolean            @default(true) @map("is_active")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  comments          Comment[]
  likes             Like[]
  submissions       Submission[]
  templateAccess    TemplateAccess[]
  templates         Template[]         @relation("OwnedTemplates")
  user_admin_status user_admin_status?

  @@map("users")
}

model Topic {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String     @unique
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  templates Template[]

  @@map("topics")
}

model Tag {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @unique
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  templateTags TemplateTag[]

  @@index([name])
  @@map("tags")
}

model Template {
  id             String                   @id @default(uuid()) @db.Uuid
  title          String
  description    String?
  imageUrl       String?                  @map("image_url")
  isPublic       Boolean                  @default(true) @map("is_public")
  ownerId        String                   @map("owner_id") @db.Uuid
  topicId        String?                  @map("topic_id") @db.Uuid
  createdAt      DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime                 @updatedAt @map("updated_at") @db.Timestamptz(6)
  fts            Unsupported("tsvector")? @default(dbgenerated("to_tsvector('english'::regconfig, ((title || ' '::text) || COALESCE(description, ''::text)))"))
  comments       Comment[]
  likes          Like[]
  submissions    Submission[]
  accessGrants   TemplateAccess[]
  templateFields TemplateField[]
  templateTags   TemplateTag[]
  owner          User                     @relation("OwnedTemplates", fields: [ownerId], references: [id], onDelete: Cascade)
  topic          Topic?                   @relation(fields: [topicId], references: [id])

  @@index([ownerId])
  @@index([topicId])
  @@index([fts], type: Gin)
  @@map("templates")
}

model TemplateField {
  id               String            @id @default(uuid()) @db.Uuid
  templateId       String            @map("template_id") @db.Uuid
  type             FieldType
  title            String
  description      String?
  required         Boolean           @default(false)
  showInResults    Boolean           @default(true) @map("show_in_results")
  order            Int
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  fieldSubmissions FieldSubmission[]
  template         Template          @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, order])
  @@index([templateId])
  @@map("template_fields")
}

model Submission {
  id               String            @id @default(uuid()) @db.Uuid
  templateId       String            @map("template_id") @db.Uuid
  userId           String            @map("user_id") @db.Uuid
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  fieldSubmissions FieldSubmission[]
  template         Template          @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([userId])
  @@map("submissions")
}

model FieldSubmission {
  id              String        @id @default(uuid()) @db.Uuid
  submissionId    String        @map("submission_id") @db.Uuid
  templateFieldId String        @map("template_field_id") @db.Uuid
  valueString     String?       @map("value_string")
  valueInteger    Int?          @map("value_integer")
  valueBoolean    Boolean?      @map("value_boolean")
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  submission      Submission    @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  field           TemplateField @relation(fields: [templateFieldId], references: [id], onDelete: Cascade)

  @@unique([submissionId, templateFieldId])
  @@index([submissionId])
  @@index([templateFieldId])
  @@map("field_submissions")
}

model Comment {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  templateId String   @map("template_id") @db.Uuid
  content    String
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([templateId])
  @@map("comments")
}

model Like {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  templateId String   @map("template_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
  @@index([userId])
  @@index([templateId])
  @@map("likes")
}

model TemplateTag {
  templateId String   @map("template_id") @db.Uuid
  tagId      String   @map("tag_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamptz(6)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@id([templateId, tagId])
  @@index([templateId])
  @@index([tagId])
  @@map("template_tags")
}

model TemplateAccess {
  templateId String   @map("template_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  grantedAt  DateTime @default(now()) @map("granted_at") @db.Timestamptz(6)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([templateId, userId])
  @@index([templateId])
  @@index([userId])
  @@map("template_access")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_admin_status {
  user_id      String   @id @db.Uuid
  is_admin     Boolean  @default(false)
  last_updated DateTime @default(now()) @db.Timestamptz(6)
  users        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum FieldType {
  STRING
  TEXT
  INTEGER
  CHECKBOX
}
